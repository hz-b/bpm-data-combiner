# Input data collected from the different bpm devices

# First get the data into here ...
# Input of one record device ... collect them here
# locally (again)
# so one can check what the IOC uses
record(longin, "$(PREFIX):inp:7:$(DEV_NAME):x")
{
    field(DESC, "mirror: $(DEV_NAME) x value")
    field(EGU, "nm")
    field(INP, {pva:{
        pv:"$(DEV_NAME):pos",
        field:"X",
        proc:true,
        }}
    )
    # Forwarding data handled by separate fanout to ensure that
    # data are pushed in desired order to python
    # field(FLNK, "$(PREFIX)$(DEV_NAME):im:x")
    field(VAL, -100000000)
}

record(longin, "$(PREFIX):inp:7:$(DEV_NAME):y")
{
    field(DESC, "mirror: y value")
    field(EGU, "nm")
    field(INP, {pva:{
        pv:"$(DEV_NAME):pos",
        field:"Y",
        proc:true,
        }}
    )
    # field(FLNK, "$(PREFIX)$(DEV_NAME):im:y")
    field(VAL, -100000000)
}

# I assume that I can rely on cnt to be updated when ever
# x or y are updated
record(longin, "$(PREFIX):inp:7:$(DEV_NAME):cnt")
{
    field(DESC, "mirror: (time) cnt")
    field(INP, {pva:{
        pv:"$(DEV_NAME):pos",
        field:"lmt_l",
        proc:true
        }}
    )
    # done by epics 3 record currenty
    # field(FLNK, "$(PREFIX):im:$(DEV_NAME):psh")
    field(VAL, -1)
}

# Input data collected from the different bpm devices
# First get the data into here ...
# Pydevice needs to support aao
record(aai, "$(PREFIX):inp:$(DEV_NAME):posv")
{
     field(DESC, "mirror: $(DEV_NAME) posv")
     field(INP,  "$(DEV_NAME):posv CPP")
     field(NELM, 3)
     field(FLNK, "$(PREFIX):im:$(DEV_NAME):toposv")
}

# push dat from input to pydev:aao
# aao seems not to have an DOL entry
record(aSub, "$(PREFIX):im:$(DEV_NAME):toposv")
{
     field(DESC, "mirror: $(DEV_NAME) posv to aao")
     # perhaps to read directly from network ?
     field(INPA, "$(PREFIX):inp:$(DEV_NAME):posv")
     field(OUTA, "$(PREFIX):im:$(DEV_NAME):posv PP")
     field(NOA,  3)
     field(NOVA, 3)
     field(FTA,  "LONG")
     field(FTVA,  "LONG")
     field(SNAM, "array_forward")
     field(TPRO, 0)
}

record(aao, "$(PREFIX):im:$(DEV_NAME):posv")
{
     field(DESC, "mirror: $(DEV_NAME) posv to py")
     field(DTYP, "pydev")
     field(NELM, 3)
     field(FTVL,  "LONG")
     field(OUT,  "@update(dev_name='$(DEV_NAME)', reading=%VAL%, tpro=%TPRO%)")
     field(FLNK, "$(PREFIX):im:$(DEV_NAME):mon:trg")
     field(TPRO, 0)
}

record(fanout, "$(PREFIX):inp:$(DEV_NAME):trg")
{
    field(DESC, "mirror: $(DEV_NAME) trigger on new data")
    field(LNK0, "$(PREFIX):inp:$(DEV_NAME):x")
    field(LNK1, "$(PREFIX):inp:$(DEV_NAME):y")
    field(LNK2, "$(PREFIX):inp:$(DEV_NAME):cnt")
}

record(subArray, "$(PREFIX):inp:$(DEV_NAME):x")
{
    field(DESC, "mirror: $(DEV_NAME) x value")
    field(EGU, "nm")
    field(INP, "$(PREFIX):inp:$(DEV_NAME):posv")
    field(FTVL, "LONG")
    field(MALM, 3)
    field(NELM, 1)
    field(INDX, 1)
    # Forwarding data handled by separate fanout to ensure that
    # data are pushed in desired order to python
    # field(FLNK, "$(PREFIX)$(DEV_NAME):im:x")
    # field(VAL, -100000000)
}

record(subArray, "$(PREFIX):inp:$(DEV_NAME):y")
{
    field(DESC, "mirror: $(DEV_NAME) y value")
    field(EGU, "nm")
    field(INP, "$(PREFIX):inp:$(DEV_NAME):posv")
    field(INP, "$(DEV_NAME):posv")
    field(FTVL, "LONG")
    field(MALM, 3)
    field(NELM, 1)
    field(INDX, 2)
    # Forwarding data handled by separate fanout to ensure that
    # data are pushed in desired order to python
    # field(FLNK, "$(PREFIX)$(DEV_NAME):im:y")
    # field(VAL, -100000000)
}

record(subArray, "$(PREFIX):inp:$(DEV_NAME):cnt")
{
    field(DESC, "mirror: $(DEV_NAME) cnt")
    field(EGU, "nm")
    field(INP, "$(PREFIX):inp:$(DEV_NAME):posv")
    field(INP, "$(DEV_NAME):posv")
    field(FTVL, "LONG")
    field(MALM, 3)
    field(NELM, 1)
    field(INDX, 0)
    # Forwarding data handled by separate fanout to ensure that
    # data are pushed in desired order to python
    field(FLNK, "$(PREFIX):im:$(DEV_NAME):psh")
    # field(VAL, -100000000)
}


record(stringin, "$(PREFIX):inp:$(DEV_NAME):name")
{
    field(DESC, "mirror: name")
    field(INP, {pva:{
        pv:"$(DEV_NAME):pos",
        field:"cfg.name",
        proc:true,
        }}
    )
    field(VAL, "unknown")
    field(PINI, "YES")
    field(FLNK, "$(PREFIX):im:$(DEV_NAME):name")
    field(VAL, "unknown")
    field(PINI, "YES")
}

# Now the records to push the info further to python
record(fanout, "$(PREFIX):im:$(DEV_NAME):psh")
{
    # should call to python ... python should start building the
    # internal data structure ... not a way yet to push directly
    field(LNK0, "$(PREFIX):im:$(DEV_NAME):cnt")
    field(LNK1, "$(PREFIX):im:$(DEV_NAME):x")
    field(LNK2, "$(PREFIX):im:$(DEV_NAME):y")
    field(LNK3, "$(PREFIX):im:$(DEV_NAME):ctl")
    field(LNK4, "$(PREFIX):im:$(DEV_NAME):mon:trg")
}

record(longout, "$(PREFIX):im:$(DEV_NAME):x")
{
    field(DESC, "push to py: x")
    field(DTYP, "pydev")
    field(DOL, "$(PREFIX):inp:$(DEV_NAME):x")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', x=%VAL%)")
    field(VAL, -1)
    # field(PINI, "YES")
    # field(TPRO, 1)
}

record(longout, "$(PREFIX):im:$(DEV_NAME):y")
{
    field(DESC, "push to py: y")
    field(DTYP, "pydev")
    field(DOL, "$(PREFIX):inp:$(DEV_NAME):y")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', y=%VAL%)")
    field(VAL, -1)
    # field(PINI, "YES")
    # field(TPRO, 1)
}

record(longout, "$(PREFIX):im:$(DEV_NAME):cnt")
{
    field(DESC, "push to py: cnt")
    field(DTYP, "pydev")
    field(DOL, "$(PREFIX):inp:$(DEV_NAME):cnt")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', cnt=%VAL%)")
    field(VAL, -1)
    # field(PINI, "YES")
    # field(TPRO, 1)
}

# informs python side: a new measurement hand over finished
record(longout, "$(PREFIX):im:$(DEV_NAME):ctl")
{
    field(DESC, "push to py: ctl")
    field(DTYP, "pydev")
    field(DOL, "$(PREFIX):inp:$(DEV_NAME):cnt")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', ctl=%VAL%)")
    field(VAL, -1)
    # field(PINI, "YES")
    # field(TPRO, 1)
}

# This is forwarded to python solely to be able to check that the
# $(DEV_NAME) matches the name the device communicates.
#
# It seems to be updated everytime  new beam position measurement
# data arrive. Need to check how to avoid that this record is
# updated.
record(stringout, "$(PREFIX):im:$(DEV_NAME):name")
{
    field(DTYP, "pydev")
    field(DOL, "$(PREFIX)$(DEV_NAME):name")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', name='%VAL%')")
    field(VAL, "unknown")
    field(PINI, "YES")
    # field(TPRO, 1)
}

# Monitor: use a fixed value for count down
# Reason: cont down is easy to see when it expirces: credit Fritz Lang
# if required: could be an upcount with an countdown implemented by
# difference to threshold value
record(longout, "$(PREFIX):im:$(DEV_NAME):mon:trg")
{
    field(DESC, "start of count down")
    field(VAL, 20)
    # set to yes for debug purposes
    # field(PINI, "YES")
    field(OUT, "$(PREFIX):im:$(DEV_NAME):mon:cnt_dwn.VAL PP")
    field(OMSL, "closed_loop")
}

record(calcout, "$(PREFIX):im:$(DEV_NAME):mon:cnt_dwn")
{

    field(DESC, "motr stat: counting down")
    field(INPA, "$(PREFIX):im:(DEV_NAME):mon:trg NPP")
    field(CALC, "(VAL > 0) ? (VAL - 1) : 0")
    field(SCAN, ".5 second")
    field(DOPT, "Use CALC")
    field(FLNK, "$(PREFIX):im:$(DEV_NAME):mon:is_act")
}

record(calcout, "$(PREFIX):im:$(DEV_NAME):mon:is_act")
{
    field(DESC, "motr stat: active?")
    field(INPA, "$(PREFIX):im:$(DEV_NAME):mon:cnt_dwn")
    # to provoke a active change at first arrival
    # of data
    field(VAL, 0)
    field(CALC, "A > 0")
    field(OOPT, "On Change")
    field(DOPT, "Use CALC")
    field(OUT, "$(PREFIX):im:$(DEV_NAME):mon:active PP")
}

record(bo, "$(PREFIX):im:$(DEV_NAME):mon:active")
{
    field(DESC, "motr stat: active -> py")
    field(DTYP, "pydev")
    field(ZNAM, "not sending")
    field(ONAM, "sending")
    # assume not sending by default
    field(VAL, 0)
    field(PINI, "YES")
    # field(DOL, "$(PREFIX):im:$(DEV_NAME):mon:is_act")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', active=%VAL%)")
    field(TPRO, 1)
}

# pydevice does not yet honor VAL at default
# need to get malte's patch into main
record(bo, "$(PREFIX):$(DEV_NAME):enabled:x")
{
    field(ZNAM, "inactive")
    field(ONAM, "active")
    field(VAL, 1)
    field(PINI, "YES")
    field(TPRO, 1)
    field(OUT, "$(PREFIX):im:$(DEV_NAME):enabled:x PP")
}

record(bo, "$(PREFIX):$(DEV_NAME):enabled:y")
{
    field(ZNAM, "inactive")
    field(ONAM, "active")
    field(VAL, 1)
    field(PINI, "YES")
    field(TPRO, 1)
    field(OUT, "$(PREFIX):im:$(DEV_NAME):enabled:y PP")
}

record(bo, "$(PREFIX):im:$(DEV_NAME):enabled:x")
{
    field(DTYP, "pydev")
    field(ZNAM, "inactive")
    field(ONAM, "active")
    field(TPRO, 1)
    field(OUT, "@update(dev_name='$(DEV_NAME)', enabled=%VAL%, plane='x')")
}

record(bo, "$(PREFIX):im:$(DEV_NAME):enabled:y")
{
    field(DTYP, "pydev")
    field(ZNAM, "inactive")
    field(ONAM, "active")
    field(TPRO, 1)
    field(OUT, "@update(dev_name='$(DEV_NAME)', enabled=%VAL%, plane='y')")
}
