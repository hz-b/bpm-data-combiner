# Input data collected from the different bpm devices

# # Input data collected from the different bpm devices
record(pycalc, "$(PREFIX):inp:$(DEV_NAME):posv")
{
      field(DESC, "mirror: $(DEV_NAME) posv")
      field(INPA,  "$(DEV_NAME):posv CPP")
      field(FTA, LONG)
      field(MEA, 3)
      field(CALC, "update(dev_name='$(DEV_NAME)', reading=%A%, tpro=%TPRO%)")
      # field(TPRO, 1)
}


record(mbbi, "$(PREFIX):inp:$(DEV_NAME):sync_stat")
{
     field(DESC, "Device synchronised? ")
     field(INP, "$(DEV_NAME):clocks:sync_st_m CPP")
     field(ZRST, "NoSync")
     field(ONST, "Tracking")
     field(TWST, "Synchronised")
     field(ZRVL, 0)
     field(ONVL, 1)
     field(TWVL, 2)
     field(FLNK, "$(PREFIX):im:$(DEV_NAME):sync_stat")
}

#
# Todo: Bug? shows 1 instead of 2 even if the value is 2
#
record(mbbo, "$(PREFIX):im:$(DEV_NAME):sync_stat")
{
      field(DESC, "Sync stat -> py")
      field(DTYP, "pydev")
      field(DOL, "$(PREFIX):inp:$(DEV_NAME):sync_stat")
      field(OMSL, "closed_loop")
      field(OUT,  "@update(dev_name='$(DEV_NAME)', sync_stat=%VAL%, tpro=%TPRO%)")
      field(ZRST, "NoSync")
      field(ONST, "Tracking")
      field(TWST, "Synchronised")
      field(ZRVL, 0)
      field(ONVL, 1)
      field(TWVL, 2)
}


record(stringin, "$(PREFIX):inp:$(DEV_NAME):name")
{
    field(DESC, "mirror: name")
    # field(INP, {pva:{
    #     pv:"$(DEV_NAME):pos",
    #     field:"cfg.name",
    #     proc:true,
    #     }}
    # )
    field(VAL, "unknown")
    field(PINI, "YES")
    field(FLNK, "$(PREFIX):im:$(DEV_NAME):name")
    field(VAL, "unknown")
    field(PINI, "YES")
}

# This is forwarded to python solely to be able to check that the
# $(DEV_NAME) matches the name the device communicates.
#
# It seems to be updated everytime  new beam position measurement
# data arrive. Need to check how to avoid that this record is
# updated.
record(stringout, "$(PREFIX):im:$(DEV_NAME):name")
{
    field(DTYP, "pydev")
    field(DOL, "$(PREFIX)$(DEV_NAME):name")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', name='%VAL%')")
    field(VAL, "unknown")
    field(PINI, "YES")
    # field(TPRO, 1)
}


# Monitor: use a fixed value for count down
# Reason: cont down is easy to see when it expirces: credit Fritz Lang
# if required: could be an upcount with an countdown implemented by
# difference to threshold value
record(longout, "$(PREFIX):im:$(DEV_NAME):mon:trg")
{
    field(DESC, "start of count down")
    field(VAL, 20)
    # set to yes for debug purposes
    # field(PINI, "YES")
    field(OUT, "$(PREFIX):im:$(DEV_NAME):mon:cnt_dwn.VAL PP")
    field(OMSL, "closed_loop")
    field(TPRO, 0)
}

record(calcout, "$(PREFIX):im:$(DEV_NAME):mon:cnt_dwn")
{

    field(DESC, "motr stat: counting down")
    # field(INPA, "$(PREFIX):im:$(DEV_NAME):mon:trg NPP")
    field(CALC, "(VAL > 0) ? (VAL - 1) : 0")
    field(SCAN, ".5 second")
    field(DOPT, "Use CALC")
    field(FLNK, "$(PREFIX):mon:$(DEV_NAME):is_act")
}


record(calcout, "$(PREFIX):mon:$(DEV_NAME):is_act")
{
    field(DESC, "motr stat: active?")
    field(INPA, "$(PREFIX):im:$(DEV_NAME):mon:cnt_dwn")
    # to provoke a active change at first arrival
    # of data
    field(VAL, 0)
    field(CALC, "A > 0")
    field(OOPT, "On Change")
    field(DOPT, "Use CALC")
    field(OUT, "$(PREFIX):im:$(DEV_NAME):mon:active PP")
}


record(bo, "$(PREFIX):im:$(DEV_NAME):mon:active")
{
    field(DESC, "motr stat: active -> py")
    field(DTYP, "pydev")
    field(ZNAM, "not sending")
    field(ONAM, "sending")
    # assume not sending by default
    field(VAL, 0)
    field(PINI, "YES")
    field(DOL, "$(PREFIX):im:$(DEV_NAME):mon:is_act")
    field(OMSL, "closed_loop")
    field(OUT, "@update(dev_name='$(DEV_NAME)', active=%VAL%, tpro=%TPRO%)")
    # field(TPRO, 1)
}


# pydevice does not yet honor VAL at default
# need to get malte's patch into main
record(bo, "$(PREFIX):$(DEV_NAME):enabled:x")
{
    field(ZNAM, "inactive")
    field(ONAM, "active")
    field(VAL, 1)
    field(PINI, "YES")
    # field(TPRO, 1)
    field(OUT, "$(PREFIX):im:$(DEV_NAME):enabled:x PP")
}

record(bo, "$(PREFIX):$(DEV_NAME):enabled:y")
{
    field(ZNAM, "inactive")
    field(ONAM, "active")
    field(VAL, 1)
    field(PINI, "YES")
    # field(TPRO, 1)
    field(OUT, "$(PREFIX):im:$(DEV_NAME):enabled:y PP")
}

record(bo, "$(PREFIX):im:$(DEV_NAME):enabled:x")
{
    field(DTYP, "pydev")
    field(ZNAM, "inactive")
    field(ONAM, "active")
    # field(TPRO, 1)
    field(OUT, "@update(dev_name='$(DEV_NAME)', enabled=%VAL%, plane='x', tpro=%TPRO%)")
}

record(bo, "$(PREFIX):im:$(DEV_NAME):enabled:y")
{
    field(DTYP, "pydev")
    field(ZNAM, "inactive")
    field(ONAM, "active")
    # field(TPRO, 1)
    field(OUT, "@update(dev_name='$(DEV_NAME)', enabled=%VAL%, plane='y', tpro=%TPRO%)")
}
